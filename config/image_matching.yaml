# Splat Replay 画像マッチング設定ガイド
# このファイルはSplatoon 3のゲーム状態とイベントを検出するための
# 画像マッチングアルゴリズムの設定方法を説明します
#
# 注意: このファイルは設定方法の説明のみです
# 実際の設定値はユーザーと相談しながら決定する必要があります

# ==========================================
# 設定ファイルの全体構造
# ==========================================

# シーン検出設定（複数手法の組み合わせ対応）
scenes:
  # 各シーンは以下の構造で定義します:
  # scene_name:
  #   description: "シーンの説明"
  #   enabled: true/false
  #   chain_policy:
  #     success_condition: "all_must_pass"/"any_can_pass"/"majority_pass"
  #     min_required_steps: 数値
  #   detection_chain:
  #     - step: ステップ番号
  #       name: "ステップ名"
  #       type: "hsv"/"rgb"/"template"/"uniform_color"
  #       [type固有のパラメータ]
  #       threshold: 0.0-1.0の閾値
  #       description: "ステップの説明"
  #       continue_on_fail: true/false
  #       required: true/false
  #       mask: (オプション)
  #         x: X座標
  #         y: Y座標
  #         width: 幅
  #         height: 高さ

  # 検出したいシーンをここに定義
  # 例: battle_start, battle_end, lobby_screen, loading_screen, special_ready など

# 単一手法検出器（シンプルな検出用）
simple_matchers:
  # 各マッチャーは以下の構造で定義します:
  # matcher_name:
  #   type: "hsv"/"rgb"/"template"/"uniform_color"
  #   [type固有のパラメータ]
  #   threshold: 0.0-1.0の閾値
  #   description: "マッチャーの説明"
  #   enabled: true/false

  # HSVタイプの場合:
  #   lower_bound: (H, S, V)の下限値
  #   upper_bound: (H, S, V)の上限値
  
  # RGBタイプの場合:
  #   rgb: (R, G, B)の値
  
  # templateタイプの場合:
  #   template_path: "テンプレート画像のパス"

  power_off_dark:
    type: "brightness"
    max_value: 20
    min_value: null
    roi:
      x: 0
      y: 0
      width: 1920
      height: 1080
    description: "電源OFF時の暗さ判定"
    enabled: true

  power_off_template:
    type: "template"
    template_path: "templates/power_off.png"
    threshold: 0.9
    description: "電源OFFテンプレート"
    enabled: true

# ゲームモード検出（ルール別）
game_modes:
  # シーン検出と同じ構造で各ゲームモードを定義
  # 例: turf_war, splat_zones, tower_control, rainmaker, clam_blitz

# 複合条件検出（より複雑な条件組み合わせ）
composite_detection:
  # シーン検出と同じ構造で複合的な検出条件を定義
  # majority_passなどの高度な成功条件を使用可能
  power_off:
    success_condition: "any_can_pass"
    matchers:
      - power_off_dark
      - power_off_template

# ==========================================
# グローバル設定
# ==========================================

global:
  # デフォルトの関心領域（ROI）
  default_roi:
    x: 0  # 左上X座標
    y: 0  # 左上Y座標
    width: 1920   # 幅（通常は画面解像度）
    height: 1080  # 高さ（通常は画面解像度）


  # パフォーマンス設定
  performance:
    max_fps_check: 2.0  # 最大チェック回数/秒
    resize_factor: 0.5  # 画像リサイズ率（0.5 = 半分）
    enable_caching: true  # キャッシュ有効化
    
    chain_settings:
      step_timeout_ms: 100      # 各ステップのタイムアウト（ミリ秒）
      inter_step_delay_ms: 5    # ステップ間の遅延（ミリ秒）
      enable_early_exit: true   # 早期終了の有効化
    
  # デバッグ設定
  debug:
    save_matched_frames: false  # マッチフレームの保存
    output_directory: "debug/matched_frames"  # 出力ディレクトリ
    log_match_scores: false     # スコアログ出力
    log_chain_execution: false  # チェーン実行ログ
    save_intermediate_results: false  # 中間結果保存

# テンプレートパス設定
templates:
  base_path: "templates"  # テンプレート画像の基準パス
  formats: [".png", ".jpg", ".bmp"]  # 対応画像フォーマット
  
  required:   # 必須テンプレート（存在チェック対象）
    # - "template_name.png"
  
  optional:   # オプションテンプレート
    # - "optional_template.png"

# チェーン実行設定
chain_execution:
  max_parallel_chains: 3  # 並列実行可能な最大チェーン数
  
  priority:  # 実行優先度
    high: []    # 高優先度のシーン名リスト
    normal: []  # 通常優先度のシーン名リスト
    low: []     # 低優先度のシーン名リスト
  
  fallback:
    enable_single_method_fallback: true    # 単一手法フォールバック
    fallback_threshold_multiplier: 0.8    # フォールバック時の閾値倍率

# ==========================================
# 設定値の制約・検証ルール
# ==========================================

validation:
  threshold:
    min: 0.0  # 閾値の最小値
    max: 1.0  # 閾値の最大値
  
  hsv_bounds:
    hue: [0, 360]         # 色相の範囲
    saturation: [0, 255]  # 彩度の範囲
    value: [0, 255]       # 明度の範囲
  
  rgb_values:
    red: [0, 255]    # 赤成分の範囲
    green: [0, 255]  # 緑成分の範囲
    blue: [0, 255]   # 青成分の範囲
    
  chain_validation:
    max_steps_per_chain: 5  # チェーンあたりの最大ステップ数
    required_fields: ["step", "name", "type", "description", "continue_on_fail", "required"]
    
  success_conditions:
    allowed_values: ["all_must_pass", "any_can_pass", "majority_pass"]
    descriptions:
      all_must_pass: "全てのrequired=trueステップが成功する必要がある"
      any_can_pass: "いずれか1つのステップが成功すれば検出成功"
      majority_pass: "min_required_steps以上のステップが成功すれば検出成功"

# ==========================================
# 設定方法の詳細説明
# ==========================================

# 検出タイプの説明:
# 
# 1. "hsv": HSV色空間での色範囲検出
#    - lower_bound: (H, S, V) 下限値
#    - upper_bound: (H, S, V) 上限値
#    - threshold: マッチした画素の割合の閾値
#
# 2. "rgb": RGB色での特定色検出
#    - rgb: (R, G, B) 対象色
#    - threshold: 色の近似度の閾値
#
# 3. "template": テンプレートマッチング
#    - template_path: テンプレート画像のパス
#    - threshold: マッチング信頼度の閾値
#
# 4. "uniform_color": 領域の色の均一性検出
#    - hue_threshold: 色相の許容範囲
#    - 主に背景の一様性チェックに使用

# 成功条件の説明:
# - "all_must_pass": 全てのrequired=trueステップが成功
# - "any_can_pass": いずれか1つのステップが成功
# - "majority_pass": min_required_steps以上のステップが成功

# 重要な注意事項:
# ================
# このファイルには実際の設定値は含まれていません。
# 実際の検出設定（色範囲、閾値、テンプレートパスなど）は
# ユーザーとの相談により、ゲームの実際の画面に合わせて
# 個別に決定する必要があります。
# 
# 設定手順:
# 1. 検出したいシーンやイベントを特定
# 2. 各シーンの特徴的な視覚要素を分析
# 3. 適切な検出手法とパラメータを選択
# 4. テスト環境で動作確認と調整
